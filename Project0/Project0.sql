CREATE TABLE ACCOUNTUSERS (
    ACCOUNTUSERS_ID INTEGER PRIMARY KEY,
    ACCOUNTUSERS_USERNAME VARCHAR2(25),
    ACCOUNTUSERS_PASSWORD VARCHAR2(25),
    ACCOUNTUSERS_SUPERUSER NUMBER(1) DEFAULT 0
);
/

CREATE TABLE BANK_ACCT (
    BANK_ACCT_ID INTEGER PRIMARY KEY,
    BANK_ACCT_BALANCE NUMBER(8,2) DEFAULT 0.00,
);
/

CREATE TABLE TRANSACTIONS (
    TRANSACTIONS_ID INTEGER PRIMARY KEY,
    TRANSACTIONS_TIME DATE,
    TRANSACTIONS_TYPE VARCHAR2(20),
    TRANSACTIONS_MODIFIER NUMBER(8,2) DEFAULT 0.00
);
/

CREATE TABLE ACCOUNTUSERS_BANK_ACCT (
    ACCOUNTUSERS_ID INTEGER,
    BANK_ACCT_ID INTEGER,
    PRIMARY KEY (ACCOUNTUSERS_ID, BANK_ACCT_ID)
);
/

CREATE TABLE BANK_ACCT_TRANSACTIONS (
    BANK_ACCT_ID INTEGER,
    TRANSACTIONS_ID INTEGER,
    PRIMARY KEY (BANK_ACCT_ID, TRANSACTIONS_ID)
);
/

--FOREIGN KEY CONSTRAINS (DDL)
ALTER TABLE ACCOUNTUSERS_BANK_ACCOUNT
ADD CONSTRAINT FK_AU_AU_BANK_ACCOUNT
FOREIGN KEY (ACCOUNTUSERS_ID) REFERENCES ACCOUNTUSERS(ACCOUNTUSERS_ID);
/

ALTER TABLE ACCOUNTUSERS_BANK_ACCT
ADD CONSTRAINT FK_BANK_ACCT_AU_BANK_ACCT
FOREIGN KEY (BANK_ACCT_ID) REFERENCES BANK_ACCT(BANK_ACCT_ID);
/

ALTER TABLE BANK_ACCT_TRANSACTIONS
ADD CONSTRAINT FK_BANK_ACCT_BANK_ACCT_TRANS
FOREIGN KEY (BANK_ACCT_ID) REFERENCES BANK_ACCT(BANK_ACCT_ID);
/

ALTER TABLE BANK_ACCT_TRANSACTIONS
ADD CONSTRAINT FK_TRANS_BANK_ACCT_TRANS
FOREIGN KEY (TRANSACTIONS_ID) REFERENCES TRANSACTIONS(TRANSACTIONS_ID);
/

ALTER TABLE BANK_ACCT
ADD CONSTRAINT FK_TRANSACTIONS_ID
FOREIGN KEY (TRANSACTIONS_ID) REFERENCES TRANSACTIONS(TRANSACTIONS_ID);
/

ALTER TABLE ACCOUNTUSERS
ADD CONSTRAINT UC_ACCOUNTUSERS_USERNAME UNIQUE(ACCOUNTUSERS_USERNAME);
/

--Allowing forign key constrains to delete without any problems with ON DELETE CASCADE
ALTER TABLE ACCOUNTUSERS_BANK_ACCT
DROP CONSTRAINT FK_BANK_ACCT_AU_BANK_ACCT;
/

ALTER TABLE ACCOUNTUSERS_BANK_ACCT
ADD CONSTRAINT FK_BANK_ACCT_AU_BANK_ACCT
FOREIGN KEY (BANK_ACCT_ID) REFERENCES BANK_ACCT(BANK_ACCT_ID) ON DELETE CASCADE;
/

ALTER TABLE BANK_ACCT_TRANSACTIONS
DROP CONSTRAINT FK_BANK_ACCT_BANK_ACCT_TRANS;
/

ALTER TABLE BANK_ACCT_TRANSACTIONS
ADD CONSTRAINT FK_BANK_ACCT_BANK_ACCT_TRANS
FOREIGN KEY (BANK_ACCT_ID) REFERENCES BANK_ACCT(BANK_ACCT_ID) ON DELETE CASCADE;
/

CREATE SEQUENCE SQ_ACCOUNTUSERS_PK
START WITH 1 
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_BANK_ACCT_PK
START WITH 1 
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_TRANSACTIONS_PK
START WITH 1 
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TR_INSERT_ACCOUNTUSERS
BEFORE INSERT ON ACCOUNTUSERS
FOR EACH ROW
BEGIN
    SELECT SQ_ACCOUNTUSERS_PK.NEXTVAL INTO :NEW.ACCOUNTUSERS_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_BANK_ACCT
BEFORE INSERT ON BANK_ACCT
FOR EACH ROW
BEGIN
    SELECT SQ_BANK_ACCT_PK.NEXTVAL INTO :NEW.BANK_ACCT_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_TRANSACTIONS
BEFORE INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    SELECT SQ_TRANSACTIONS_PK.NEXTVAL INTO :NEW.TRANSACTIONS_ID FROM DUAL;
END;
/

--POPULATING LISTS

INSERT INTO ACCOUNTUSERS(ACCOUNTUSERS_USERNAME, ACCOUNTUSERS_PASSWORD,ACCOUNTUSERS_SUPERUSER)
VALUES('kevin','password',1);

INSERT INTO ACCOUNTUSERS(ACCOUNTUSERS_USERNAME, ACCOUNTUSERS_PASSWORD,ACCOUNTUSERS_SUPERUSER)
VALUES('tad','password2',1);

SELECT * FROM ACCOUNTUSERS;

INSERT INTO BANK_ACCT(BANK_ACCT_BALANCE)
VALUES(300000.00);

INSERT ALL
INTO ACCOUNTUSERS_BANK_ACCT
VALUES (1,2)
INTO ACCOUNTUSERS_BANK_ACCT
VALUES (2,4)
SELECT * FROM DUAL;
/
INSERT INTO TRANSACTIONS(TRANSACTIONS_TIME, TRANSACTIONS_TYPE, TRANSACTIONS_MODIFIER) VALUES (TO_DATE('2004-03-01 00:00:00','yyyy-mm-dd hh24:mi:ss'),
'deposit',300.00);

--MAKING FUNCTIONS 
--GET INFO ON BANK ACCOUNTS FOR EACH USER
/*
CREATE OR REPLACE FUNCTION DISPLAY_BA(USER_ID IN VARCHAR2(25))
RETURN NULL
BEGIN
    SELECT ACCOUNTUSERS_ID, BANK_ACCT_ID FROM ACCOUNTUSERS_BANK_ACCT AB WHERE AB.ACCOUNTUSERS_ID = USER_ID;
END;

INSERT INTO BANK_ACCT(BANK_ACCT_BALANCE) VALUES(300.00);

INSERT INTO ACCOUNTUSERS_BANK_ACCT VALUES(61,21);

SELECT * FROM ACCOUNTUSERS_BANK_ACCT WHERE ACCOUNTUSERS_ID = 61;

SELECT * FROM ACCOUNTUSERS_BANK_ACCT;

SELECT MAX(BANK_ACCT_ID) FROM BANK_ACCT;

UPDATE BANK_ACCT SET BANK_ACCT_BALANCE = 299600 WHERE BANK_ACCT_ID = 62;

SELECT CURRENT_TIMESTAMP(8)+0 FROM DUAL;

INSERT INTO TRANSACTIONS(TRANSACTIONS_TIME, TRANSACTIONS_TYPE, TRANSACTIONS_MODIFIER) VALUES (TO_DATE(CURRENT_TIMESTAMP(8)+1), 'deposit', 3);

DISPLAY_BA(1);.
*/

--Stored procedure 


CREATE TABLE TEMP (
    AU_ID INTEGER,
    BA_ID INTEGER
);
/

CREATE OR REPLACE PROCEDURE PRINT_BANK_ACCTS(A_ID IN NUMBER)
IS 
BEGIN
    --SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
    
    SELECT * FROM ACCOUNTUSERS_BANK_ACCT WHERE BANK_ACCT_ID = A_ID;
    --SELECT * FROM TEMP;
END;

UPDATE ACCOUNTUSERS
SET ACCOUNTUSERS_SUPERUSER = 1
WHERE ACCOUNTUSERS_USERNAME = 'tad';
/

BEGIN
PRINT_BANK_ACCTS(61);
END;